{"version":3,"sources":["components/project/ProjectItem.js","components/project/ProjectList.js","components/project/ProjectMenu.js","components/ModalForm.js","components/ModalButton.js"],"names":["ProjectItem","project","useState","modalTitle","setModalTitle","errors","setErrors","setFormData","history","useHistory","status_template","name","projectState","setProjectState","useContext","ProjectContext","setProjectStore","projects","dispatchProject","projectStore","colors","setColors","useEffect","statuses","workspace","custom_statuses","default_statuses","mappedStatuses","i","length","_id","active_status_template","map","color","handleIsErrorCheck","submittedData","console","log","obj","bol","hasOwnProperty","checkLeaveDeleteInput","handleProjectDelete","a","Object","keys","deleteProjectItem","push","RouterPaths","ProjectMenu","urlPathText","space_id","className","onClick","TaskMenu","project_id","TaskForm","index","style","backgroundColor","ModalButton","modalFormId","text","ModalForm","onSubmit","data","inputData","placeholders","isError","ProjectList","params","useParams","SpaceContext","spaces","projectListSpace","setprojectListSpace","allStatuses","setAllStatuses","formData","task_id","type","httpProjectAction","GET","payload","find","space","toString","foundspace","handleDataSubmit","Array","isArray","saveProjectItem","stateInputData","setStateInputData","changeInput","e","key","target","id","value","selectedOptions","closeModal","window","$","modal","tabIndex","preventDefault","entries","element","onChange","required","placeholder","htmlFor","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"static/js/6.633c9f4c.chunk.js","sourcesContent":["import React,{useEffect,useState,useContext} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport { ProjectContext , httpProjectAction} from \"../../context/ProjectContext\"\r\nimport {deleteProjectItem} from \"../../actions/project\"\r\nimport RouterPaths from '../RouterPaths'\r\nimport ModalForm from '../ModalForm'\r\nimport ModalButton from '../ModalButton'\r\n\r\n\r\n\r\nconst ProjectItem = ({project}) => {\r\n    const[modalTitle,setModalTitle]=useState('');\r\n    const [errors,setErrors]=useState({})\r\n    const [formData,setFormData] = useState({});\r\n    const history = useHistory();\r\n    const [projectState,setProjectState]=useState({...project,status_template:{name:''}})\r\n    const {projects,dispatchProject,projectStore,setProjectStore}= useContext(ProjectContext);\r\n    const [colors, setColors] =useState([])\r\n\r\n    useEffect(() => {\r\n        let statuses = [\r\n            ...projectState.workspace.custom_statuses,\r\n            projectState.workspace.default_statuses,\r\n        ]\r\n        \r\n        let mappedStatuses={};\r\n        for (let i = 0; i < statuses.length; i++) {\r\n            mappedStatuses[statuses[i]._id]=statuses[i]\r\n        }\r\n\r\n        // Adding the project status to State\r\n        setProjectState({...projectState,status_template:mappedStatuses[projectState.active_status_template]})  \r\n\r\n       setColors(mappedStatuses[projectState.active_status_template].statuses.map(({color})=>(color)))\r\n        \r\n    }, [setProjectState,setColors])\r\n\r\n    const handleProjectClick =()=>{\r\n        // console.log(projectState)\r\n        history.push(RouterPaths().TaskMenu.urlPathText({space_id:projectState.workspace._id,project_id:projectState._id}))\r\n           \r\n        setProjectStore(projectState);\r\n    }\r\n\r\n    const handleProjectNewTask =()=>{\r\n        history.push(RouterPaths().TaskForm.urlPathText({space_id:projectState.workspace._id,project_id:projectState._id}))\r\n\r\n    }\r\n\r\n    const checkLeaveDeleteInput=(obj)=>{\r\n        let bol=false;\r\n        if (obj.hasOwnProperty('Delete Project') && obj['Delete Project'] === 'del') {\r\n            setErrors({})            \r\n        }else if(obj.hasOwnProperty('Delete Project') && obj['Delete Project'] !== 'del'){\r\n            setErrors({'Delete Project':'Invalid! Enter Lowercase del'})\r\n            bol=true;\r\n        }\r\n        return bol\r\n      }\r\n    \r\n      const handleIsErrorCheck =(submittedData)=>{\r\n        console.log(submittedData)\r\n        return checkLeaveDeleteInput  (submittedData);\r\n        \r\n      }\r\n\r\n    const handleProjectDelete = async()=>{\r\n        if (Object.keys(errors).length === 0) {\r\n            await deleteProjectItem({_id:projectState._id})\r\n            history.push(RouterPaths().ProjectMenu.urlPathText({space_id:projectState.workspace._id}))\r\n    \r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {projectState?\r\n                <div className=\"\">\r\n                    <button onClick={handleProjectClick} className=\"button m-1\">\r\n                        {projectState.name}\r\n                    </button>\r\n                    <button onClick={handleProjectNewTask} className=\"button m-1\">\r\n                        + task\r\n                    </button>\r\n                    \r\n                    <span className='border rounded p-2'>\r\n                        {projectState.status_template.name }\r\n                        {\r\n                        colors?\r\n                        colors.map((color,index)=>(\r\n                            <span key={index} className='border rounded p-2' style={{backgroundColor:color}}></span>\r\n                        ))\r\n                        :''\r\n                    }   \r\n                    \r\n                    </span>\r\n\r\n                    <span className=''>\r\n                        <ModalButton className='m-2 btn btn-outline-danger p-1' modalFormId='task' text='Delete' onClick={()=>{setFormData({name:''});setModalTitle('Delete this Project')}}/>                                    \r\n                        \r\n                        <ModalForm  modalFormId='task' onSubmit={(data)=>{ handleProjectDelete(data)}} modalTitle={modalTitle} inputData={{'Delete Project':''}} placeholders={{'Delete Project': 'type del'}} errors={errors} isError={(submittedData)=>{return handleIsErrorCheck(submittedData)}}/>\r\n                    </span>\r\n\r\n\r\n                    {/* <button onClick={handleProjectDelete} className=\"button m-1 btn-outline-danger\">\r\n                        delete\r\n                    </button> */}\r\n                    \r\n                </div>\r\n            :null\r\n            }\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectItem\r\n","import React from 'react'\r\nimport ProjectItem from './ProjectItem'\r\n\r\n\r\nconst ProjectList = ({projects}) => {\r\n\r\n    return (\r\n       <>\r\n                {\r\n                projects.map((project)=>{\r\n                    return<ProjectItem \r\n                    key={project._id} \r\n                    project={project} \r\n                    ></ProjectItem>\r\n                })\r\n                }  \r\n      </>\r\n    )\r\n}\r\n\r\nexport default ProjectList\r\n","import React ,{useState,useEffect,useContext}from 'react'\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport RouterPaths from '../RouterPaths';\r\nimport ProjectList from './ProjectList'\r\nimport ModalForm from '../ModalForm'\r\nimport ModalButton from '../ModalButton'\r\nimport { ProjectContext , httpProjectAction} from \"../../context/ProjectContext\"\r\nimport { SpaceContext , httpSpaceAction} from \"../../context/SpaceContext\"\r\nimport {saveProjectItem} from \"../../actions/project\"\r\n\r\nconst ProjectMenu = () => {\r\n    const params = useParams();\r\n    const {projects,dispatchProject}= useContext(ProjectContext);\r\n    const [spaces]= useContext(SpaceContext);\r\n    const[projectListSpace,setprojectListSpace]= useState({name:''})\r\n    const [allStatuses,setAllStatuses]= useState([])\r\n    const[formData,setFormData]= useState({})\r\n    const[modalTitle,setModalTitle]=useState('');\r\n    const history = useHistory();\r\n    const {space_id,project_id,task_id} = useParams();\r\n\r\n    useEffect(async()=>{\r\n        dispatchProject({type:httpProjectAction.GET,payload:params})\r\n\r\n        // const projects =await getProjectList({space_id:params.space_id});\r\n\r\n        const foundspace= await spaces.find((space)=>(space._id.toString()===params.space_id.toString()))\r\n        setprojectListSpace({...foundspace});\r\n       \r\n        if (foundspace) {\r\n            const template_statuses = [...foundspace.custom_statuses,foundspace.default_statuses]\r\n            setAllStatuses([...foundspace.custom_statuses ,foundspace.default_statuses])\r\n          \r\n        }\r\n       \r\n\r\n    },[params,setprojectListSpace,setAllStatuses,spaces])\r\n   \r\n\r\n\r\n\r\n    const handleDataSubmit= async (data)=>{\r\n        data.space_id=params.space_id;\r\n       \r\n        if (data.active_status_template && Array.isArray(data.active_status_template)) {\r\n            data.active_status_template=data.active_status_template[1]._id\r\n            //  dispatchProject({type:httpProjectAction.EDIT,payload:data})\r\n            await saveProjectItem(data)\r\n            history.push(RouterPaths().ProjectMenu.urlPathText({space_id:space_id,project_id:project_id}))\r\n\r\n            \r\n        }else{\r\n        //  dispatchProject({type:httpProjectAction.EDIT,payload:data})\r\n        await saveProjectItem(data)\r\n        history.push(RouterPaths().ProjectMenu.urlPathText({space_id:space_id,project_id:project_id}))\r\n\r\n        }\r\n        console.log(data)\r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"border-top border-bottom p-2  d-flex flex-column flex-wrap  align-items-start \">\r\n            <div className=\"my-2 d-flex flex-row align-items-center\">\r\n                <h6 className=\"\">Projects on {projectListSpace.name} </h6>\r\n                <ModalButton className='m-2' modalFormId='projectmenu' text='+ New' onClick={()=>{setFormData({name:'',active_status_template:allStatuses||[]});setModalTitle('New Project')}}/>\r\n            </div>\r\n            <ModalForm  modalFormId='projectmenu' onSubmit={(data)=>{ handleDataSubmit(data)}} modalTitle={modalTitle} inputData={formData} />\r\n\r\n            {\r\n                projects?<ProjectList projects={projects}/> :null\r\n            }\r\n           \r\n           </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectMenu\r\n","import PropTypes from 'prop-types'\r\nimport { useState ,useEffect} from 'react';\r\nimport * as $ from \"jquery\";\r\n\r\n\r\nconst ModalForm = ({modalTitle,onSubmit,inputData,modalFormId,placeholders={},errors={},isError=false}) => {\r\n    const [stateInputData, setStateInputData] = useState(inputData);\r\n\r\n    const changeInput=(e)=>{\r\n        let key = e.target.id;\r\n        let data ={};\r\n       \r\n       \r\n        \r\n        \r\n        if (key !=='active_status_template') {\r\n            data[key]=e.target.value\r\n            setStateInputData({...stateInputData,...data})\r\n        }\r\n        if (key =='active_status_template') {\r\n            data[key]=e.target.selectedOptions[0].value\r\n            setStateInputData({...stateInputData,...data})\r\n        }\r\n        \r\n\r\n       \r\n    }\r\n    \r\n    // Run Once only when inputdata from param comes in\r\n    useEffect(()=>{\r\n        setStateInputData(inputData);\r\n    },[inputData])\r\n\r\n    const closeModal=()=>{\r\n        // Using Jquery to close Boostrap Modal\r\n        window.$(`#${modalFormId}`).modal('hide');\r\n    }\r\n\r\n   \r\n    \r\n  \r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if (typeof isError === 'function' ) {\r\n            if (!isError(stateInputData) ) {\r\n                onSubmit(stateInputData)\r\n                closeModal(); \r\n            }  \r\n        }else{\r\n            onSubmit(stateInputData)\r\n                closeModal();\r\n        }\r\n           \r\n\r\n    }\r\n  \r\n    \r\n\r\n    return (\r\n        <div>\r\n           \r\n            <div  className='modal fade ' id={modalFormId} tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">  \r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">{modalTitle}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <form onSubmit={handleSubmit} className=\"needs-validation\" >\r\n                        {\r\n                            \r\n                            Object.entries(inputData).map(([key,value], index)=>{\r\n                                let element=null;\r\n                                if (key=='active_status_template') {\r\n                                   element =<select className=\"form-select\" id={key} name=\"active_status_template\" onChange={changeInput} required>\r\n                                        <option value='' className='fw-light'>please select</option>\r\n                                        {\r\n                                            value.map(({_id,name},key)=>(\r\n                                                \r\n                                               key==0 ? <option  value={_id}> { name + key}</option>:\r\n                                                <option value={_id}>{name+ key}</option>\r\n                                            ))\r\n                                        }\r\n                                        </select> \r\n                                 }else{\r\n                                     element=<input type=\"text\" className=\"form-control \" id={key} \r\n                                     placeholder={placeholders[key]?placeholders[key]:''}\r\n                                     value={stateInputData[key]} onChange={changeInput}\r\n                                     required\r\n                                     />\r\n                                 }\r\n\r\n                                return<div className=\"mb-3\" key={index}> \r\n                                        <label htmlFor=\"text\" className=\"col-form-label\" style={{ 'textTransform': 'capitalize'}}>{key}</label>\r\n                                            {element}                                            \r\n                                        <div className=\"text-danger form-text\">\r\n                                         {errors[key]?errors[key]:''}\r\n                                        </div>\r\n                                         \r\n                                        <div className=\"invalid-feedback\">\r\n        Please choose a username.\r\n      </div>\r\n                                    </div>\r\n                            })\r\n                        }\r\n                        <div className=\"mb-2 d-flex justify-content-end\">\r\n                            <button type=\"submit\" className=\" ml-auto\" >Save</button>\r\n                        </div>  \r\n                   </form>\r\n\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nModalForm.propTypes={\r\n    modalTitle:PropTypes.string,\r\n    inputData:PropTypes.object,\r\n    onSubmit:PropTypes.func\r\n}\r\n\r\nexport default ModalForm\r\n","\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ModalButton = ({text,onClick,color,modalFormId,className}) => {\r\n\r\n    return (\r\n        <button dangerouslySetInnerHTML={{ __html: text }} onClick={onClick} \r\n                type=\"button\" className={'p-1 '+ className}\r\n                data-bs-toggle=\"modal\" \r\n                data-bs-target={'#'+modalFormId}\r\n                style={{color:color}}>\r\n            {}\r\n        </button>\r\n    )\r\n}\r\n\r\nModalButton.propTypes={\r\n    text:PropTypes.string,\r\n    modalFormId:PropTypes.string,\r\n    color:PropTypes.string,\r\n    width:PropTypes.string,\r\n    onClick:PropTypes.func\r\n}\r\n\r\nexport default ModalButton\r\n"],"sourceRoot":""}