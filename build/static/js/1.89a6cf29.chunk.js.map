{"version":3,"sources":["actions/websocket.js","components/task/TaskForm.js","components/ModalForm.js","components/ModalButton.js"],"names":["ws","payload","WebSocket","window","location","protocol","localStorage","getItem","split","onopen","e","console","log","onclose","onerror","wsInit","TaskForm","useState","modalTitle","setModalTitle","errors","setErrors","setFormData","statusTemplate","setStatusTemplate","assignees","taskFormData","setTaskFormData","spaceMembers","setSpaceMembers","editor","useRef","useContext","SpaceContext","spaces","ProjectContext","projects","dispatchProject","projectStore","setProjectStore","useParams","space_id","project_id","task_id","history","useHistory","useEffect","space","find","String","_id","project","temp","workspace","default_statuses","custom_statuses","status","active_status_template","members","getTaskItem","then","data","updated_by","JSON","parse","updated_at","Date","now","toISOString","created_at","created_by","statuses","a","onmessage","event","res","action","changeFormData","key","target","name","undefined","value","newTaskFormData","selectedOpts","selectedOptions","values","Array","from","map","length","Set","assignee","handleIsErrorCheck","submittedData","obj","bol","hasOwnProperty","checkLeaveDeleteInput","handleTaskDelete","Object","keys","deleteTaskItem","push","RouterPaths","TaskMenu","urlPathText","className","style","position","color","index","onClick","assignee_id","send","stringify","filter","saveTask","removeAssignee","role","toUTCString","id","encType","onSubmit","preventDefault","htmlFor","type","placeholder","onChange","required","due_date","size","multiple","member","ref","description","config","readonly","tabIndex","onBlur","content","bottom","right","width","zIndex","ModalButton","modalFormId","text","ModalForm","inputData","placeholders","isError","stateInputData","setStateInputData","changeInput","closeModal","$","modal","entries","element","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"static/js/1.89a6cf29.chunk.js","sourcesContent":["import server from '../config/index'\r\nimport axios  from 'axios';\r\n\r\n\r\n\r\nexport const wsInit = (payload) =>{\r\n\r\n      // WEBSOCKET STUUF HERE\r\n        let ws = new WebSocket(`${window.location.protocol==='https:'? 'wss': 'ws'}://localhost:4000/ws/task?token=${localStorage.getItem('token').split('\"')[1]}`);\r\n        // console.log(ws) \r\n        // ALWAYS STRINGIFY DATA\r\n        // ws.onmessage=(event)=>{\r\n        // let res = JSON.parse(event.data)\r\n        // console.log(res)\r\n        // if (res.action ==='ASSIGNEE_ADD') {\r\n        //     console.log(res.data);\r\n        //     console.log('add')\r\n        // }\r\n        // if (res.action ==='ASSIGNEE_REMOVE') {\r\n        //     console.log(res.data)\r\n        //     console.log('removed')\r\n        // }\r\n        // if (res.action ==='TASK_UPDATE') {\r\n        // }\r\n        // }\r\n        ws.onopen = (e)=>{\r\n        console.log(' websocket is open')\r\n        \r\n        \r\n        }\r\n\r\n        ws.onclose= ()=>{\r\n        console.log('wesocket ios closed')\r\n        ws = new WebSocket(`ws://localhost:4000/ws/task?token=${localStorage.getItem('token').split('\"')[1]}`);\r\n        }\r\n\r\n        ws.onerror =()=>{\r\n        console.log('wesocket error')\r\n        ws = new WebSocket(`ws://localhost:4000/ws/task?token=${localStorage.getItem('token').split('\"')[1]}`);\r\n        }\r\n\r\n    return ws\r\n};\r\n\r\nexport const ws = wsInit();","import React,{useState, useRef,useContext, useEffect,useCallback} from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport RouterPaths from '../RouterPaths';\r\nimport { SpaceContext , httpSpaceAction} from \"../../context/SpaceContext\"\r\nimport { ProjectContext,httpProjectAction} from \"../../context/ProjectContext\"\r\nimport JoditEditor from \"jodit-react\"; \r\nimport TaskCommentForm from './TaskCommentForm';\r\nimport {saveTask,getTaskItem,deleteTaskItem,sseTaskUpdate} from '../../actions/task'\r\nimport ModalForm from '../ModalForm'\r\nimport ModalButton from '../ModalButton'\r\nimport {ws} from '../../actions/websocket'\r\n\r\nconst TaskForm = () => {\r\n\r\n  const[modalTitle,setModalTitle]=useState('');\r\n  const [errors,setErrors]=useState({})\r\n  const [formData,setFormData] = useState({});\r\n  const [statusTemplate,setStatusTemplate] = useState({})\r\n  const [taskFormData,setTaskFormData]= useState({assignees:[]});\r\n  const [spaceMembers,setSpaceMembers]= useState([]);\r\n  const editor = useRef(null);\r\n  const [spaces,dispatchSpace]= useContext(SpaceContext);\r\n  const {projects,dispatchProject,projectStore,setProjectStore}= useContext(ProjectContext);\r\n  const {space_id,project_id,task_id} = useParams();\r\n  const history = useHistory();\r\n\r\n\r\n  \r\n\r\n\r\n  useEffect (()=>{\r\n\r\n   \r\n    \r\n    const space = spaces.find(space => String(space._id === String(space_id)))\r\n    const project = projects.find(project => String(project._id)===String(project_id))\r\n\r\n    if (project) {\r\n      const allStatuses=[project.workspace.default_statuses,...project.workspace.custom_statuses]\r\n      const temp =allStatuses.find(status=> String(status._id) === String(project.active_status_template))\r\n      if (temp) {\r\n      setStatusTemplate(temp)\r\n      }\r\n    }\r\n\r\n    if (space) {\r\n      setSpaceMembers(space.members)\r\n    }\r\n\r\n    \r\n    // Check if task is new or needs update\r\n    if (task_id!=='undefined') {\r\n      getTaskItem({_id:task_id}).then((data=>{\r\n        setTaskFormData({\r\n          ...data,\r\n          updated_by:JSON.parse(localStorage.getItem('user'))._id,\r\n          updated_at:(new Date(Date.now() )).toISOString()\r\n        })\r\n      }))\r\n    }else{\r\n      setTaskFormData({\r\n        // ...taskFormData,\r\n        assignees:[],\r\n        created_at:(new Date(Date.now() )).toISOString(),\r\n        created_by:JSON.parse(localStorage.getItem('user'))._id,\r\n        workspace:space_id,\r\n        project:project_id,\r\n        status:statusTemplate.statuses?statusTemplate.statuses[0]: ''\r\n      })\r\n    }\r\n\r\n    \r\n    // WHEN COMPONENT UNMOUNTS\r\n    return()=>{\r\n      // sseTaskUpdate({task_id:'',start:''})\r\n    }\r\n\r\n  },[,projects,statusTemplate,getTaskItem,dispatchProject,spaceMembers,setSpaceMembers,setTaskFormData])\r\n\r\n\r\n\r\n  // //WEBSOCKET TRANSACTIONS\r\n  useEffect(async () => {\r\n\r\n\r\n    console.log(ws)\r\n  \r\n\r\n      ws.onmessage=(event)=>{\r\n      let res = JSON.parse(event.data)\r\n      console.log(res)\r\n      if (res.action ==='ASSIGNEE_ADD') {\r\n          console.log(res.data);\r\n          console.log('add')\r\n      }\r\n    }\r\n  \r\n    return () => {\r\n      \r\n    }\r\n  }, [ws.onmessage])\r\n  \r\n  \r\n \r\n\r\n  const config = {\r\n\t\treadonly: false, // all options from https://xdsoft.net/jodit/doc/\r\n    placeholder: 'Start typing task here....',\r\n    name:'editor'\r\n\t}\r\n\r\n  const changeFormData = (e)=>{\r\n\r\n    // console.log(e);\r\n    let key = e.target ? e.target.name: undefined ;\r\n    let data ={};\r\n    if (key ==='name') {\r\n      data[key]=e.target.value\r\n      setTaskFormData({...taskFormData,...data})\r\n    }\r\n    if (key ==='due_date') {\r\n      data[key]=e.target.value\r\n      setTaskFormData({...taskFormData,...data})\r\n    }\r\n    if (key ==='status') {\r\n      data[key]=JSON.parse(e.target.value)\r\n      const newTaskFormData={...taskFormData,...data}\r\n      setTaskFormData(newTaskFormData);\r\n    }\r\n    if (key ==='assignees') {\r\n      let selectedOpts=e.target.selectedOptions\r\n      const values= Array.from(selectedOpts).map(({ value }) => value);\r\n\r\n      const members ={'members':values}\r\n      \r\n      if (taskFormData.assignees.length !=0) {\r\n         data[key]=Array.from(new Set([...taskFormData.assignees.map(assignee=>{return assignee._id}), ...values]));\r\n          members.members=Array.from(new Set([...taskFormData.assignees.map(assignee=>{return assignee._id}), ...values]));\r\n         setTaskFormData({...taskFormData,...data,...members})\r\n      }\r\n      data[key]=Array.from(new Set([...values]));\r\n      setTaskFormData({...taskFormData,...data,...members})\r\n    }\r\n\r\n  }\r\n\r\n  // After submitting the task\r\n  const handleFormSubmit =(e)=>{\r\n    e.preventDefault();\r\n\r\n   saveTask(taskFormData).then((data)=>{console.log(data)})\r\n\r\n  //  WEBSOCKET\r\n   ws.send(JSON.stringify({action:'ASSIGNEE_ADD',data:taskFormData}))\r\n  //  history.push(RouterPaths().TaskForm.urlPathText({space_id:space_id,project_id:project_id,task_id:task_id}))\r\n   history.push(RouterPaths().TaskMenu.urlPathText({space_id:space_id,project_id:project_id,task_id:task_id}))\r\n  }\r\n\r\n  const removeAssignee = (assignee_id) =>{\r\n        // WEBSOCKET\r\n        ws.send(JSON.stringify({action:'ASSIGNEE_ADD',data:taskFormData}))\r\n\r\n    // Filter the assignee and transform the taskform data\r\n    let data={assignees:taskFormData.assignees.filter(assignee=>(String(assignee._id ))!= String(assignee_id))}\r\n    setTaskFormData({...taskFormData,assignees:data.assignees,members:data.assignees})\r\n\r\n    saveTask({...taskFormData,assignees:data.assignees}).then((data)=>{console.log(data)})\r\n    history.push(RouterPaths().TaskForm.urlPathText({space_id:space_id,project_id:project_id,task_id:task_id}))\r\n \r\n  }\r\n\r\n  const checkLeaveDeleteInput=(obj)=>{\r\n    let bol=false;\r\n    if (obj.hasOwnProperty('Delete Task') && obj['Delete Task'] === 'del') {\r\n        setErrors({})            \r\n    }else if(obj.hasOwnProperty('Delete Task') && obj['Delete Task'] !== 'del'){\r\n        setErrors({'Delete Task':'Invalid! Enter Lowercase del'})\r\n        bol=true;\r\n    }\r\n    return bol\r\n  }\r\n\r\n  const handleIsErrorCheck =(submittedData)=>{\r\n    console.log(submittedData)\r\n    return checkLeaveDeleteInput  (submittedData);\r\n    \r\n  }\r\n  \r\n  const handleTaskDelete = async(data) =>{\r\n    \r\n    if (Object.keys(errors).length === 0) {\r\n      await deleteTaskItem({_id:task_id})\r\n      history.push(RouterPaths().TaskMenu.urlPathText({space_id:space_id,project_id:project_id}))\r\n\r\n    }\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n        <section className=\"task col my-4 p-2 \" style={{position:'relative'}}>\r\n          <div className=\"task-header row justify-content-between\">\r\n            <div className=\"p-1 col\">\r\n              <span className=\"fw-light\">Status:</span>\r\n              {\r\n                taskFormData.status ?\r\n                <span style={{color:taskFormData.status.color}}> {taskFormData.status.status}</span>\r\n                :''\r\n              }\r\n            </div>\r\n\r\n            <div className=\"p-1 col\">\r\n              <div className=\"dropdown mx-2 \">\r\n                <button className=\"dropbtn fw-light \">Assignees of task <i className=\"fas fa-caret-down\"></i></button>\r\n                <ul className=\"dropdown-content w-100 \">\r\n                  {\r\n                    taskFormData.assignees ?\r\n                    (taskFormData.assignees.map((assignee,index)=>\r\n                    (<li className=\" fw-light\" key={index}>\r\n                      {assignee.name} \r\n                    <i className=\"fas fa-user-times text-danger float-right p-1\" onClick={()=>{removeAssignee(assignee._id)}} role=\"button\"></i>\r\n                    </li>)))\r\n                    :(<li className=\"fw-light \">Assign members   </li>)\r\n\r\n                  }\r\n                </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"p-1 col-md-4 col-sm-12\">\r\n              <span className=\"fw-light\">Date created:</span>\r\n              <span> {(new Date(taskFormData.created_at )).toUTCString()} </span>\r\n            </div>\r\n\r\n          </div> \r\n\r\n          <div className=\"task-body row\">\r\n            \r\n            <form className=\"col px-4\" id=\"taskform\" encType=\"multipart/form-data\" onSubmit={handleFormSubmit}>\r\n                <p>Tags:\r\n                  Bug, Sprint22\r\n                </p>\r\n\r\n                <div className=\"row justify-content-between align-items-start\">\r\n                  <div className=\"col mb-3\">\r\n                    <label className=\"input-group-text fw-light\" htmlFor=\"\"> Task Name</label>\r\n                      <input type=\"text\" name=\"name\" className=\"mb-3 w-100\" value={taskFormData.name ? taskFormData.name :''} placeholder=\"task name\"\r\n                      onChange={changeFormData} required/>\r\n                  </div>\r\n\r\n\r\n                  <div className=\"col mb-3\">\r\n                      <label className=\"input-group-text fw-light\" htmlFor=\"\"> Due date:</label>\r\n                      <input className=\"w-100\" type=\"datetime-local\" name=\"due_date\" value={taskFormData.due_date ? (new Date(taskFormData.due_date)).toISOString().split('.')[0] :''} onChange={changeFormData} />\r\n                   </div>\r\n\r\n                </div>\r\n                <div className=\"row justify-content-between align-items-start\">\r\n                    <div className=\"col mb-3\">\r\n                      <label className=\"input-group-text fw-light\" htmlFor=\"\"> Select Members to Assign:</label>\r\n                      \r\n                      <select className=\"form-select\"  id=\"\" name=\"assignees\" size=\"3\" multiple onChange={changeFormData}> \r\n                      {\r\n                        spaceMembers?\r\n                        spaceMembers.map((member,index)=>(\r\n                          <option value={member._id} key={index} >\r\n                             {member.name}\r\n                          </option>\r\n                        ))\r\n                        :''\r\n\r\n                      }           \r\n                      </select> \r\n                    </div>\r\n\r\n                  \r\n\r\n                    <div className=\"col mb-3\">\r\n                      <label className=\"input-group-text fw-light text-capitalize\" htmlFor=\"inputGroupSelect01\"> {statusTemplate? statusTemplate.name :''}</label>\r\n                      <select className=\"custom-select\" id=\"inputGroupSelect01\" name=\"status\" onChange={changeFormData} required>\r\n                        {\r\n                          statusTemplate.statuses?\r\n                          statusTemplate.statuses.map((status,index)=>(\r\n                            <option value={JSON.stringify(status)} style={{color:status.color}} key={index}>\r\n                               {status.status}\r\n                            </option>\r\n                          ))\r\n                          :''\r\n                        }\r\n                          \r\n                      </select> \r\n                    </div>\r\n\r\n                    <div className=\"col-12 mb-3\">\r\n                      <JoditEditor\r\n                              ref={editor}\r\n                              value={taskFormData.description ? taskFormData.description :''}\r\n                              config={config}\r\n                              tabIndex={1} // tabIndex of textarea\r\n                              onBlur={(content)=>{ \r\n                                setTaskFormData({...taskFormData,description:content})\r\n                              }} // preferred to use only this option to update the content for performance reasons\r\n                              // onChange={(content)=>{setTaskFormData({...taskFormData,description:content})}}\r\n                          />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n           \r\n\r\n              {/* <div className=\"my-3\">\r\n                <label className=\"fw-light\">Attachments/files: </label>\r\n                <input multiple=\"\" type=\"file\" name=\"attachments\"/>\r\n              </div> */}\r\n\r\n              <div className=''>\r\n                \r\n\r\n              </div>\r\n              \r\n              <input  type=\"submit\" className='p-1'    value=\"Save\"/>\r\n            </form>\r\n\r\n              <span className='' \r\n              style={{bottom:'0', right:'0', width:'100px', position:'absolute', zIndex:1}}\r\n              >\r\n                {\r\n                  task_id !== 'undefined' &&\r\n                  <ModalButton className='m-2 btn btn-outline-danger p-1' modalFormId='task' text='Delete' onClick={()=>{setFormData({name:''});setModalTitle('Delete this Task')}}/>                                    \r\n                }\r\n                \r\n                <ModalForm  modalFormId='task' onSubmit={(data)=>{ handleTaskDelete(data)}} modalTitle={modalTitle} inputData={{'Delete Task':''}} placeholders={{'Delete Task': 'type del'}} errors={errors} isError={(submittedData)=>{return handleIsErrorCheck(submittedData)}}/>\r\n\r\n\r\n              </span>\r\n\r\n               \r\n\r\n          </div>\r\n\r\n        </section>       \r\n        \r\n        </>\r\n    )}\r\n\r\n\r\n\r\nexport default TaskForm","import PropTypes from 'prop-types'\r\nimport { useState ,useEffect} from 'react';\r\nimport * as $ from \"jquery\";\r\n\r\n\r\nconst ModalForm = ({modalTitle,onSubmit,inputData,modalFormId,placeholders={},errors={},isError=false}) => {\r\n    const [stateInputData, setStateInputData] = useState(inputData);\r\n\r\n    const changeInput=(e)=>{\r\n        let key = e.target.id;\r\n        let data ={};\r\n       \r\n       \r\n        \r\n        \r\n        if (key !=='active_status_template') {\r\n            data[key]=e.target.value\r\n            setStateInputData({...stateInputData,...data})\r\n        }\r\n        if (key =='active_status_template') {\r\n            data[key]=e.target.selectedOptions[0].value\r\n            setStateInputData({...stateInputData,...data})\r\n        }\r\n        \r\n\r\n       \r\n    }\r\n    \r\n    // Run Once only when inputdata from param comes in\r\n    useEffect(()=>{\r\n        setStateInputData(inputData);\r\n    },[inputData])\r\n\r\n    const closeModal=()=>{\r\n        // Using Jquery to close Boostrap Modal\r\n        window.$(`#${modalFormId}`).modal('hide');\r\n    }\r\n\r\n   \r\n    \r\n  \r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if (typeof isError === 'function' ) {\r\n            if (!isError(stateInputData) ) {\r\n                onSubmit(stateInputData)\r\n                closeModal(); \r\n            }  \r\n        }else{\r\n            onSubmit(stateInputData)\r\n                closeModal();\r\n        }\r\n           \r\n\r\n    }\r\n  \r\n    \r\n\r\n    return (\r\n        <div>\r\n           \r\n            <div  className='modal fade ' id={modalFormId} tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">  \r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">{modalTitle}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <form onSubmit={handleSubmit} className=\"needs-validation\" >\r\n                        {\r\n                            \r\n                            Object.entries(inputData).map(([key,value], index)=>{\r\n                                let element=null;\r\n                                if (key=='active_status_template') {\r\n                                   element =<select className=\"form-select\" id={key} name=\"active_status_template\" onChange={changeInput} required>\r\n                                        <option value='' className='fw-light'>please select</option>\r\n                                        {\r\n                                            value.map(({_id,name},key)=>(\r\n                                                \r\n                                               key==0 ? <option  value={_id}> { name + key}</option>:\r\n                                                <option value={_id}>{name+ key}</option>\r\n                                            ))\r\n                                        }\r\n                                        </select> \r\n                                 }else{\r\n                                     element=<input type=\"text\" className=\"form-control \" id={key} \r\n                                     placeholder={placeholders[key]?placeholders[key]:''}\r\n                                     value={stateInputData[key]} onChange={changeInput}\r\n                                     required\r\n                                     />\r\n                                 }\r\n\r\n                                return<div className=\"mb-3\" key={index}> \r\n                                        <label htmlFor=\"text\" className=\"col-form-label\" style={{ 'textTransform': 'capitalize'}}>{key}</label>\r\n                                            {element}                                            \r\n                                        <div className=\"text-danger form-text\">\r\n                                         {errors[key]?errors[key]:''}\r\n                                        </div>\r\n                                         \r\n                                        <div className=\"invalid-feedback\">\r\n        Please choose a username.\r\n      </div>\r\n                                    </div>\r\n                            })\r\n                        }\r\n                        <div className=\"mb-2 d-flex justify-content-end\">\r\n                            <button type=\"submit\" className=\" ml-auto\" >Save</button>\r\n                        </div>  \r\n                   </form>\r\n\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nModalForm.propTypes={\r\n    modalTitle:PropTypes.string,\r\n    inputData:PropTypes.object,\r\n    onSubmit:PropTypes.func\r\n}\r\n\r\nexport default ModalForm\r\n","\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ModalButton = ({text,onClick,color,modalFormId,className}) => {\r\n\r\n    return (\r\n        <button dangerouslySetInnerHTML={{ __html: text }} onClick={onClick} \r\n                type=\"button\" className={'p-1 '+ className}\r\n                data-bs-toggle=\"modal\" \r\n                data-bs-target={'#'+modalFormId}\r\n                style={{color:color}}>\r\n            {}\r\n        </button>\r\n    )\r\n}\r\n\r\nModalButton.propTypes={\r\n    text:PropTypes.string,\r\n    modalFormId:PropTypes.string,\r\n    color:PropTypes.string,\r\n    width:PropTypes.string,\r\n    onClick:PropTypes.func\r\n}\r\n\r\nexport default ModalButton\r\n"],"sourceRoot":""}